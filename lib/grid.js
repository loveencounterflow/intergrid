// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CELLS, CND, alert, assign, badge, debug, echo, help, info, jr, log, new_xregex, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERGRID/GRID';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  jr = JSON.stringify;

  assign = Object.assign;

  new_xregex = require('xregexp');

  // LETTERS                   = require './a1letters'
  CELLS = require('./a1cells');

  //-----------------------------------------------------------------------------------------------------------
  this.settings = {
    rangemark: '..'
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_grid_from_cellkey = function(cellkey) {
    var cellref, height, width;
    cellref = CELLS.abs_cellref(CELLS.parse_cellkey(cellkey));
    width = cellref.colnr;
    height = cellref.rownr;
    return {
      '~isa': 'INTERGRID/GRID/grid',
      width,
      height
    };
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @is_left_of_cellkey = ( grid, cellkey_1, cellkey_2 ) ->
  //   cellref_1 = @abs_cellref grid, CELLS.parse_cellkey cellkey_1
  //   cellref_2 = @abs_cellref grid, CELLS.parse_cellkey cellkey_2
  //   width   = cellref.colnr
  //   height  = cellref.rownr
  //   return { '~isa': 'INTERGRID/GRID/grid', width, height, }

  //-----------------------------------------------------------------------------------------------------------
  this.abs_cellref = function(grid, cellref) {
    var R;
    R = assign({}, cellref);
    R = CELLS.normalize_cellref(cellref);
    //.........................................................................................................
    if (R.colsign != null) {
      R.colnr = grid.width + 1 + R.colnr;
      delete R.colsign;
    }
    //.........................................................................................................
    if (R.rowsign != null) {
      R.rownr = grid.height + 1 + R.rownr;
      delete R.rowsign;
    }
    //.........................................................................................................
    if ((R.colnr <= 0) || (R.colnr > grid.width)) {
      throw new Error(`µ9949 column nr ${rpr(cellref.colnr)} exceeds grid width ${rpr(grid.width)}`);
    }
    if ((R.rownr <= 0) || (R.rownr > grid.height)) {
      throw new Error(`µ9949 row nr ${rpr(cellref.rownr)} exceeds grid height ${rpr(grid.height)}`);
    }
    //.........................................................................................................
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.parse_cellkey = function(grid, cellkey) {
    return this.abs_cellref(grid, CELLS.parse_cellkey(cellkey));
  };

  this.abs_cellkey = function(grid, cellkey) {
    return CELLS.get_cellkey(this.parse_cellkey(grid, cellkey));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_left_of_cellref = function(grid, cellref_1, cellref_2) {
    cellref_1 = this.abs_cellref(grid, cellref_1);
    cellref_2 = this.abs_cellref(grid, cellref_2);
    return cellref_1.colnr < cellref_2.colnr;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_right_of_cellref = function(grid, cellref_1, cellref_2) {
    cellref_1 = this.abs_cellref(grid, cellref_1);
    cellref_2 = this.abs_cellref(grid, cellref_2);
    return cellref_1.colnr > cellref_2.colnr;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_above_cellref = function(grid, cellref_1, cellref_2) {
    cellref_1 = this.abs_cellref(grid, cellref_1);
    cellref_2 = this.abs_cellref(grid, cellref_2);
    return cellref_1.rownr < cellref_2.rownr;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_below_cellref = function(grid, cellref_1, cellref_2) {
    cellref_1 = this.abs_cellref(grid, cellref_1);
    cellref_2 = this.abs_cellref(grid, cellref_2);
    return cellref_1.rownr > cellref_2.rownr;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_left_of_cellkey = function(grid, cellkey_1, cellkey_2) {
    /* TAINT will perform @abs_cellref twice */
    return this.is_left_of_cellkey(grid, this.parse_cellkey(grid, cellkey_1), this.parse_cellkey(grid, cellkey_2));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_right_of_cellkey = function(grid, cellkey_1, cellkey_2) {
    /* TAINT will perform @abs_cellref twice */
    return this.is_right_of_cellkey(grid, this.parse_cellkey(grid, cellkey_1), this.parse_cellkey(grid, cellkey_2));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_above_cellkey = function(grid, cellkey_1, cellkey_2) {
    /* TAINT will perform @abs_cellref twice */
    return this.is_above_cellkey(grid, this.parse_cellkey(grid, cellkey_1), this.parse_cellkey(grid, cellkey_2));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_below_cellkey = function(grid, cellkey_1, cellkey_2) {
    /* TAINT will perform @abs_cellref twice */
    return this.is_below_cellkey(grid, this.parse_cellkey(grid, cellkey_1), this.parse_cellkey(grid, cellkey_2));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.parse_rangekey = function(grid, rangekey) {
    var bottom_digits, bottomleft, bottomright, cellkey_1, cellkey_2, cellkeys, cellref_1, cellref_2, left_letters, right_letters, top_digits, topleft, topright;
    cellkeys = rangekey.split(this.settings.rangemark);
    if (cellkeys.length !== 2) {
      throw new Error(`µ9949 expected rangekey, got ${rpr(rangekey)}`);
    }
    [cellkey_1, cellkey_2] = cellkeys;
    cellref_1 = this.abs_cellref(grid, CELLS.parse_cellkey(cellkey_1));
    cellref_2 = this.abs_cellref(grid, CELLS.parse_cellkey(cellkey_2));
    left_letters = cellref_1.colletters;
    right_letters = cellref_2.colletters;
    top_digits = cellref_1.rowdigits;
    bottom_digits = cellref_2.rowdigits;
    //.........................................................................................................
    if (!this.is_left_of_cellref(grid, cellref_1, cellref_2)) {
      [left_letters, right_letters] = [right_letters, left_letters];
    }
    //.........................................................................................................
    if (!this.is_above_cellref(grid, cellref_1, cellref_2)) {
      [top_digits, bottom_digits] = [bottom_digits, top_digits];
    }
    //.........................................................................................................
    topleft = `${left_letters}${top_digits}`;
    topright = `${right_letters}${top_digits}`;
    bottomleft = `${left_letters}${bottom_digits}`;
    bottomright = `${right_letters}${bottom_digits}`;
    //.........................................................................................................
    return {topleft, topright, bottomleft, bottomright};
  };

}).call(this);

//# sourceMappingURL=grid.js.map
