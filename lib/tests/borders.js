// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, _INTERIM_BORDERS, alert, badge, debug, echo, eq, help, include, info, jr, log, rpr, test, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERGRID/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  _INTERIM_BORDERS = require('../experiments/border-segment-finder');

  //-----------------------------------------------------------------------------------------------------------
  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._main = function() {
    return test(this, {
      'timeout': 30000
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this["INTERIM_BORDERS.walk_segments 1"] = function(T, done) {
    var fieldidx, i, len, matcher, probe, probes_and_matchers, result, selector, x;
    probes_and_matchers = [
      [
        {
          "top": "thick",
          "right": "thick",
          "bottom": "thick",
          "left": "thick"
        },
        "mode",
        ["rectangle"]
      ],
      [
        {
          "top": "thin,red",
          "right": "thick",
          "bottom": "thick",
          "left": "thick"
        },
        "mode",
        ["single",
        "connect"]
      ],
      [
        {
          "top": "thin",
          "right": null,
          "bottom": null,
          "left": "thin"
        },
        "mode",
        ["connect"]
      ],
      [
        {
          "top": "thin",
          "right": "thin",
          "bottom": null,
          "left": "thin"
        },
        "mode",
        ["connect"]
      ],
      [
        {
          "top": "thin",
          "right": "thin",
          "bottom": null,
          "left": null
        },
        "mode",
        ["connect"]
      ],
      [
        {
          "top": null,
          "right": "thin",
          "bottom": "thin",
          "left": null
        },
        "mode",
        ["connect"]
      ],
      [
        {
          "top": null,
          "right": null,
          "bottom": null,
          "left": null
        },
        "mode",
        []
      ],
      [
        {
          "top": "thin",
          "right": "thick",
          "bottom": "thin",
          "left": "thick"
        },
        "mode",
        ["single",
        "single",
        "single",
        "single"]
      ],
      [
        {
          "top": null,
          "right": null,
          "bottom": "thin",
          "left": "thin"
        },
        "mode",
        ["connect"]
      ],
      [
        {
          "top": "thick",
          "right": "thick",
          "bottom": "thick",
          "left": "thick"
        },
        "edges",
        []
      ],
      [
        {
          "top": "thin,red",
          "right": "thick",
          "bottom": "thick",
          "left": "thick"
        },
        "edges",
        [["top"],
        ["right",
        "bottom",
        "left"]]
      ],
      [
        {
          "top": "thin",
          "right": null,
          "bottom": null,
          "left": "thin"
        },
        "edges",
        [["left",
        "top"]]
      ],
      [
        {
          "top": "thin",
          "right": "thin",
          "bottom": null,
          "left": "thin"
        },
        "edges",
        [["left",
        "top",
        "right"]]
      ],
      [
        {
          "top": "thin",
          "right": "thin",
          "bottom": null,
          "left": null
        },
        "edges",
        [["right",
        "bottom"]]
      ],
      [
        {
          "top": null,
          "right": "thin",
          "bottom": "thin",
          "left": null
        },
        "edges",
        [["right",
        "bottom"]]
      ],
      [
        {
          "top": null,
          "right": null,
          "bottom": null,
          "left": null
        },
        "edges",
        []
      ],
      [
        {
          "top": "thin",
          "right": "thick",
          "bottom": "thin",
          "left": "thick"
        },
        "edges",
        [["top"],
        ["bottom"],
        ["right"],
        ["left"]]
      ],
      [
        {
          "top": null,
          "right": null,
          "bottom": "thin",
          "left": "thin"
        },
        "edges",
        [["bottom",
        "left"]]
      ],
      [
        {
          "top": "thick",
          "right": "thick",
          "bottom": "thick",
          "left": "thick"
        },
        "style",
        ["thick"]
      ],
      [
        {
          "top": "thin,red",
          "right": "thick",
          "bottom": "thick",
          "left": "thick"
        },
        "style",
        ["thin,red",
        "thick"]
      ],
      [
        {
          "top": "thin",
          "right": null,
          "bottom": null,
          "left": "thin"
        },
        "style",
        ["thin"]
      ],
      [
        {
          "top": "thin",
          "right": "thin",
          "bottom": null,
          "left": "thin"
        },
        "style",
        ["thin"]
      ],
      [
        {
          "top": "thin",
          "right": "thin",
          "bottom": null,
          "left": null
        },
        "style",
        ["thin"]
      ],
      [
        {
          "top": null,
          "right": "thin",
          "bottom": "thin",
          "left": null
        },
        "style",
        ["thin"]
      ],
      [
        {
          "top": null,
          "right": null,
          "bottom": null,
          "left": null
        },
        "style",
        []
      ],
      [
        {
          "top": "thin",
          "right": "thick",
          "bottom": "thin",
          "left": "thick"
        },
        "style",
        ["thin",
        "thin",
        "thick",
        "thick"]
      ],
      [
        {
          "top": null,
          "right": null,
          "bottom": "thin",
          "left": "thin"
        },
        "style",
        ["thin"]
      ]
    ];
//.........................................................................................................
    for (fieldidx = i = 0, len = probes_and_matchers.length; i < len; fieldidx = ++i) {
      [probe, selector, matcher] = probes_and_matchers[fieldidx];
      result = [...(_INTERIM_BORDERS.walk_segments(fieldidx + 1, probe))];
      result = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = result.length; j < len1; j++) {
          x = result[j];
          results.push(x[selector]);
        }
        return results;
      })();
      if (CND.equals(result, [void 0])) {
        result = [];
      }
      urge('36633', jr([probe, selector, result]));
      T.eq(result, matcher);
    }
    //.........................................................................................................
    return done();
  };

  //-----------------------------------------------------------------------------------------------------------
  this["INTERIM_BORDERS.walk_segments 2"] = function(T, done) {
    var fieldidx, i, len, matcher, probe, probes_and_matchers, result;
    probes_and_matchers = [
      [
        {
          "top": "thick",
          "right": "thick",
          "bottom": "thick",
          "left": "blue,thin"
        },
        [
          {
            "fieldnr": 1,
            "style": "thick",
            "mode": "connect",
            "edges": [["top",
          "right",
          "bottom"]]
          },
          {
            "fieldnr": 1,
            "style": "blue,thin",
            "mode": "single",
            "edges": ["left"]
          }
        ]
      ]
    ];
//.........................................................................................................
    for (fieldidx = i = 0, len = probes_and_matchers.length; i < len; fieldidx = ++i) {
      [probe, matcher] = probes_and_matchers[fieldidx];
      result = [...(_INTERIM_BORDERS.walk_segments(fieldidx + 1, probe))];
      // result = [] if CND.equals result, [ undefined, ]
      urge('36633', jr([probe, result]));
    }
    // T.eq result, matcher
    //.........................................................................................................
    return done();
  };

  //###########################################################################################################
  if (module.parent == null) {
    include = ["INTERIM_BORDERS.walk_segments 1", "INTERIM_BORDERS.walk_segments 2"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=borders.js.map
