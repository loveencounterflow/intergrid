// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var A1LETTERS, CND, alert, badge, debug, echo, help, info, log, new_xregex, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERGRID/A1CELLS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  new_xregex = require('xregexp');

  A1LETTERS = require('./a1letters');

  //-----------------------------------------------------------------------------------------------------------
  this.settings = {
    patterns: {
      // a1_lowercase:  /^(?<star>[*])|((?<colstar>[*])|(?<colsign>\+|-|)(?<colletters>[a-z]+))((?<rowstar>[*])|(?<rowsign>\+|-|)(?<rowdigits>[0-9]+))/
      a1_lowercase: /^(?:(?<star>[*])|(?:(?<colstar>[*])|(?<colsign>\+|-|)(?<colletters>[a-z]+))(?:(?<rowstar>[*])|(?<rowsign>\+|-|)(?<rowdigits>[0-9]+)))$/
    }
  };

  // a1_uppercase:  /^([*]|(\+|-|)(?:[a-z]+))([*]|(\+|-|)(?:[0-9]+))/

  //-----------------------------------------------------------------------------------------------------------
  this.get_cellref = function(cellkey) {
    var _, colnr, digits, letters, match, rownr;
    if ((match = cellkey.match(this.settings.patterns.a1_lowercase)) == null) {
      throw new Error(`µ77363 expected A1 notation, got ${rpr(cellkey)}`);
    }
    [_, letters, digits] = match;
    rownr = parseInt(digits, 10);
    colnr = A1LETTERS.get_number(letters, A1LETTERS.settings.alphabets.lowercase);
    return {colnr, rownr, cellkey, letters, digits};
  };

  //-----------------------------------------------------------------------------------------------------------
  this.parse_cellref = function(cellref) {
    var R, key, ref;
    R = cellref.match(this.settings.patterns.a1_lowercase);
    if (R == null) {
      throw new Error(`µ42330 expected a cellref like 'a1', '*', '*4' or 'c-1, got ${rpr(cellref)}`);
    }
    R = R.groups;
    for (key in R) {
      ((ref = R[key]) === '' || ref === '+' || ref === (void 0) ? delete R[key] : void 0);
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.get_cellkey = function(cellref) {
    var colnr, letters, rownr;
    ({colnr, rownr} = cellref);
    if (!((colnr != null) && (colnr > 0) && (colnr = Math.floor(colnr)))) {
      throw new Error(`µ42330 expected positive integer for colnr, got ${rpr(colnr)}`);
    }
    if (!((rownr != null) && (rownr > 0) && (rownr = Math.floor(rownr)))) {
      throw new Error(`µ42330 expected positive integer for rownr, got ${rpr(rownr)}`);
    }
    letters = A1LETTERS.get_letters(rownr, A1LETTERS.settings.alphabets.lowercase);
    return `${letters}${rownr}`;
  };

}).call(this);

//# sourceMappingURL=a1cells.js.map
